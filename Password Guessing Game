#Initialize
import random
global secret_pass
global characters

passwords = ["1234","2000","test","pass","love","6969",
             "1111","mike","john","blue","asdf","jack",
             "golf","bear","5150","fred","fish","2112",
             "1212","7777","alex","fire","beer","star",
             "bill","2222","4444","baby","dave","rock",
             "cool","jake","paul","mark","free","1313",
             "wolf","king","xxxx","girl","ford"]
time_strength = ["11.11 seconds","11.11 seconds","7.92 minutes","7.92 minutes",
                 "7.92 minutes","11.11 seconds","11.11 seconds","7.92 minutes",
                 "7.92 minutes","7.92 minutes","7.92 minutes","7.92 minutes",
                 "7.92 minutes","7.92 minutes","11.11 seconds","7.92 minutes",
                 "7.92 minutes","11.11 seconds","11.11 seconds","11.11 seconds",
                 "7.92 minutes","7.92 minutes","7.92 minutes","7.92 minutes",
                 "7.92 minutes","11.11 seconds","11.11 seconds","7.92 minutes",
                 "7.92 minutes","7.92 minutes","7.92 minutes","7.92 minutes",
                 "7.92 minutes","7.92 minutes","7.92 minutes","11.11 seconds",
                 "7.92 minutes","7.92 minutes","7.92 minutes","7.92 minutes",
                 "7.92 minutes"]
#The data about the most popular passwords on the Internet, and their security level, come from a github user, jonthegeek, available under a CC-BY-NC-SA license: https://github.com/rfordatascience/tidytuesday/blob/main/data/2020/2020-01-14/readme.md#passwordscsv
filtered_list = [] #list containing the specific passwords according to user difficulty choice
guess_and_check = [] #List containing the users guess if correct, and X's if incorrect

#Functions
def choose_diff(choose):
    strength = ""
    if choose == "N":
        strength = "11.11 seconds"
    elif choose == "L":
        strength = "7.92 minutes"
    else:
        ask_again = input("Please select either 'N' for numbers, or 'L' for letters: ")         #If they mess up, then basically the selection will begin again but with a new variable, ask_again
        if ask_again == "N":
            strength = "11.11 seconds"
        elif ask_again == "L":
            strength = "7.92 minutes"
    for i in range(len(passwords)):                                                             #Looking thru the passwords list, if the time_strength is the same as the user's requested one, the correct password will be added to the filtered list
        if time_strength[i] == strength:
            filtered_list.append(passwords[i])
            i = i + 1
        else:
            i = i + 1
    return filtered_list

def guess_pass(user_guess):                                                                         #This function will take the user's guess and see if the character/number they input is the same as any one of the character/numbers in the list of secret_pass characters.
    global secret_pass                                                                              #Then, it adds the guess to a new list if correct. If incorrect, an X is added. Either way, there will be a total of some combo of Xs and guesses to make up the entire characters of the password. (Even all Xs or a lucky first guess!)
    global characters
    secret_pass = random.choice(filtered_list)
    characters = list(secret_pass)
    for i in range(len(characters)):
        if user_guess == characters[i]:
            guess_and_check.append(user_guess)
            i = i +1
        else:
            guess_and_check.append("X")
            i = i +1
    print(guess_and_check)

def extra_guesses(prompt):                                                                  #When there is another guess, neither Xs or guesses will be added b/c that would mess up the total # of characters in the password.
    for i in range(len(characters)):                                                        #Instead, the other guess will be compared to the passwords list again, but this time the correct guess will be pop & replace the original.
        if prompt == characters[i]:
            guess_and_check.pop(i)
            guess_and_check.insert(i,prompt)
            i= i +1
        else:
            i = i + 1

def complete_pass():                                                                    #A "blank" function that allows for there to be no unneccesary spaces where the extra guesses would be.
    return guess_and_check

#Main
print("""
\033[35m\033[1mWelcome to the Password Guessing game!\033[0m
Here, you're one of the many \033[35mhackers\033[0m on the internet.
Like them, you're trying to get my personal information by hacking into my account!
\033[1mCan you figure out my password in 5 guesses??\033[0m

\033[35m\033[1mModes\033[0m:
\033[1mNumbers:\033[0m password contains 4 numbers
\033[1mLetters:\033[0m password contains 4 lowercase letters
""")

while True:
    filtered_list.clear() #So that the person can restart the game
    choose_diff(input("Print 'N' for numbers and 'L' for letters: "))
    guess_pass(input("\nGuess! "))
    for i in range(len(secret_pass)):
        if guess_and_check == characters:                       #Scenarios: if the person guesses the password correctly on the first try, the program loops a "nothing" message (for the remaining 4 guesses) and then the success message is displayed
            complete_pass()                                     #This is an empty function that basically makes it so that all of the other empty guess spaces do not show .
        elif guess_and_check[i] == "X":                         #If there are any Xs in the user guess (meaning they didn't get it right on the first try), then the user gets to guess again. this time, if correct, the X is removed and the other guess is inserted
            another_guess = input("Guess again! ")
            extra_guesses(another_guess)
            print(guess_and_check)
        else:                                                #This is a very important part!! If, in the user's guesses, they have correctly guessed something BUT the program is not over yet, they need to have a "replacement guess" that allows them to still have the same 5 total guesses regardless.
            i = i+1
            one_more_guess = input("Take another guess! ")    #So, we move on to the next i, and guess with the same algorithm as before.
            extra_guesses(one_more_guess)
            print(guess_and_check)
    if guess_and_check == list(secret_pass):
        print("\nARGH, you guessed my password, " + '\033[1m' + secret_pass + '\033[0m' + ". \033[35mGood job, I s'pose..\033[0m")
        print("Most people can figure this password out in " +  '\033[1m' + time_strength[passwords.index(secret_pass)] + '\033[0m' + ". \033[35mHow safe do you think YOUR passwords are..?\033[0m")
    else:
        print("\nMy password was: " +  '\033[1m' + secret_pass + '\033[0m' + ". \033[35mHow safe do you think it is?\033[0m")
        print("Typically, it can be guessed in " +   '\033[1m' + time_strength[passwords.index(secret_pass)] + '\033[0m' +  ". \033[35mThink twice when you make your passwords!\033[0m")
    guess_and_check.clear()                                                         #To start a new round
    end_it_all = input("\nWould you like to play again? (y/n) ")
    if end_it_all == "n":
        print("Bye, Hacker! \033[35m\033[1mStay safe on the internet-- make good passwords!\033[0m\n")
        break
    elif not end_it_all == "y":
        print("Please print either 'y' for yes, or 'n' for no!")
        play_again = input("Play again? (y/n) ")
        if play_again == "n":
            print("Bye, Hacker! \033[35m\033[1mStay safe on the internet-- make good passwords!\033[0m\n")
            break
